#!/bin/sh

STAGED_FILES=$(git diff --cached --name-only --diff-filter=ACMR | grep -E "\<app")

if [[ "$STAGED_FILES" = "" ]]; then
  exit 0
fi
PASS=true

# Check for phpcs
echo "\nValidating PHPCS:\n"

which ./vendor/bin/phpcs &> /dev/null
if [[ "$?" == 1 ]]; then
  echo "\t\033[41mPlease install PHPCS\033[0m"
  exit 1
fi

RULESET=./phpcs.ruleset.xml

for FILE in $STAGED_FILES
do
  ./vendor/bin/phpcs --standard="$RULESET" "$FILE"

  if [[ "$?" == 0 ]]; then
    echo "\033[32mPHPCS Passed: $FILE\033[0m"
  else
    echo "\033[41mPHPCS Failed: $FILE\033[0m"
    PASS=false
  fi
done

echo "\nPHPCS validation completed!\n"

if ! $PASS; then
  echo "\033[41mCOMMIT FAILED:\033[0m Your commit contains files that should pass PHPCS but do not. Please fix the PHPCS errors and try again.\n"
else
  echo "\033[42mCOMMIT SUCCEEDED\033[0m\n"
fi

echo "================================="

# Check for phpmd
echo "\nValidating PHPMD:\n"

which ./vendor/bin/phpmd &> /dev/null
if [[ "$?" == 1 ]]; then
  echo "\t\033[41mPlease install PHPMD\033[0m"
  exit 1
fi

RULESET=./phpmd.ruleset.xml

for FILE in $STAGED_FILES
do
  ./vendor/bin/phpmd "$FILE" text $RULESET

  if [[ "$?" == 0 ]]; then
    echo "\033[32mPHPMD Passed: $FILE\033[0m"
  else
    echo "\033[41mPHPMD Failed: $FILE\033[0m"
    PASS=false
  fi
done

echo "\nPHPMD validation completed!\n"

if ! $PASS; then
  echo "\033[41mCOMMIT FAILED:\033[0m Your commit contains files that should pass PHPMD but do not. Please fix the PHPMD errors and try again.\n"
  exit 1
else
  echo "\033[42mCOMMIT SUCCEEDED\033[0m\n"
fi

exit $?

